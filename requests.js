const fetch = require('node-fetch');
const { bot } = require('./index'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏–∑ `index.js`

const pendingRequests = new Map();

async function handleNewRequest(userId, username, email, adminId) {
    try {
        const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\nüë§ –ò–º—è: ${username}\nüìß Email: ${email}\n\n‚úÖ /approve_${userId} ‚ùå /reject_${userId}`;
        const sentMessage = await bot.telegram.sendMessage(adminId, message);
        
        pendingRequests.set(userId, sentMessage.message_id);
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', error);
        return false;
    }
}

async function approveRequest(userId, siteUrl) {
    try {
        const response = await fetch(`${siteUrl}/approve.php`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId, status: 'approved' })
        });

        const data = await response.json();

        if (response.ok) {
            console.log(`‚úÖ –ó–∞—è–≤–∫–∞ ${userId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.`);
            pendingRequests.delete(userId);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:`, data.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏:', error);
    }
}

async function rejectRequest(userId, siteUrl) {
    try {
        const response = await fetch(`${siteUrl}/approve.php`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ user_id: userId, status: 'rejected' })
        });

        const data = await response.json();

        if (response.ok) {
            console.log(`‚ùå –ó–∞—è–≤–∫–∞ ${userId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`);
            pendingRequests.delete(userId);
        } else {
            console.error(`‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:`, data.error);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', error);
    }
}


module.exports = { handleNewRequest, approveRequest, rejectRequest };
