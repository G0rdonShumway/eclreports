require('dotenv').config();
const { Telegraf } = require('telegraf');
const axios = require('axios');
const cron = require('node-cron');
const express = require('express');
const mysql = require('mysql2/promise');

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const FETCH_URL = process.env.FETCH_URL;
const SELF_URL = process.env.SELF_URL;
const PORT = process.env.PORT || 3000;

const dbConfig = {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
};

const bot = new Telegraf(BOT_TOKEN);
const app = express();

// Webhook –¥–ª—è Telegram
app.use(bot.webhookCallback('/bot'));
bot.telegram.setWebhook(`${SELF_URL}/bot`);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ MySQL
async function queryDatabase(sql, params = []) {
    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.execute(sql, params);
        return rows;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ MySQL:', error);
        return null;
    } finally {
        if (connection) await connection.end();
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('test', (ctx) => {
    ctx.reply('–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!');
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ Chat ID
bot.command('id', (ctx) => {
    console.log(`Chat ID: ${ctx.chat.id}`);
    ctx.reply(`–í–∞—à Chat ID: ${ctx.chat.id}`);
});

async function fetchReport(url) {
	try {
		const response = await fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			}
		});

		if (!response.ok) {
			throw new Error('Network response was not ok');
		}

		const data = await response.json();
		console.log(data);
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error);
	}
}

cron.schedule('* * * * *', () => {
  console.log('running a task every minute');
});

// –ó–∞–ø—Ä–æ—Å –∫ API –∏ –ë–î –∫–∞–∂–¥—É—é –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É –Ω–µ—á–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞
// cron.schedule('1 1-23/2 * * *', async () => {
//     try {
//         // 1. –ó–∞–ø—Ä–æ—Å –∫ API
//         fetchReport(FETCH_URL);

//         // 2. –ó–∞–ø—Ä–æ—Å –∫ –ë–î
//         const reports = await queryDatabase(
//             'SELECT Report, DateTime FROM `interval_reports` ORDER BY ID DESC LIMIT 1'
//         );

//         if (!reports || reports.length === 0) {
//             return bot.telegram.sendMessage(CHAT_ID, '–ù–µ—Ç –æ—Ç—á–µ—Ç–∞.');
//         }

//         // 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
//         const { Report, DateTime } = reports[0];
//         const message = `üìÖ ${DateTime}\n${Report}\nhttps://eclservice.org/reports}`;
        
//         bot.telegram.sendMessage(CHAT_ID, message);
//     } catch (error) {
//         console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞:`, error.message);
//     }
// });

// –ü–∏–Ω–≥—É–µ—Ç –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
setInterval(async () => {
    try {
        await bot.telegram.sendMessage(CHAT_ID, '–ü–∏–Ω–≥ üü¢');
        console.log(`–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:', error);
    }
}, 600000);

// –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
