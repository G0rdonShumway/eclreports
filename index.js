require('dotenv').config();
const { Telegraf } = require('telegraf');
const axios = require('axios');
const cron = require('node-cron');
const express = require('express');
const mysql = require('mysql2/promise');
const { DateTime } = require('luxon'); // –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É Luxon

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const FETCH_URL = process.env.FETCH_URL;
const SELF_URL = process.env.SELF_URL;
const PORT = process.env.PORT || 3000;

const dbConfig = {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
};

const bot = new Telegraf(BOT_TOKEN);
const app = express();

// Webhook –¥–ª—è Telegram
app.use(bot.webhookCallback('/bot'));
bot.telegram.setWebhook(`${SELF_URL}/bot`);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ MySQL
async function queryDatabase(sql, params = []) {
    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.execute(sql, params);
        return rows;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ MySQL:', error);
        return null;
    } finally {
        if (connection) await connection.end();
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('test', (ctx) => {
    ctx.reply('–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!');
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ Chat ID
bot.command('id', (ctx) => {
    console.log(`Chat ID: ${ctx.chat.id}`);
    ctx.reply(`–í–∞—à Chat ID: ${ctx.chat.id}`);
});

async function fetchReport(url) {
	try {
		const response = await fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			}
		});

		if (!response.ok) {
			throw new Error('Network response was not ok');
		}

		const data = await response.json();
		console.log(data);
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error);
	}
}

// –ó–∞–ø—Ä–æ—Å –∫ API –∏ –ë–î –∫–∞–∂–¥—É—é –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É –Ω–µ—á–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞
cron.schedule('1 0 1,3,5,7,9,11,13,15,17,19,21,23 * * *', async () => {
    try {
        await fetchReport(FETCH_URL);

        setTimeout(async () => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Luxon –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
            let now = DateTime.now().setZone("Asia/Tbilisi");
            let reportDate = now;

            if (now.hour === 1) {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –≤ 01:00, –±–µ—Ä—ë–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
                reportDate = now.minus({ days: 1 });
            }

            // 3. –ó–∞–ø—Ä–æ—Å –∫ –ë–î
            const reports = await queryDatabase(
                'SELECT Report, DateTime FROM `interval_reports` ORDER BY ID DESC LIMIT 1'
            );

            if (!reports || reports.length === 0) {
                return bot.telegram.sendMessage(CHAT_ID, '–ù–µ—Ç –æ—Ç—á–µ—Ç–∞.');
            }

            // 4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            const { Report } = reports[0];

            const formattedDate = reportDate.toFormat("dd-MM-yy HH:00");

            // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            const message = `üìÖ ${formattedDate}\n${Report}\nhttps://eclservice.org/reports`;
            
            bot.telegram.sendMessage(CHAT_ID, message);
        }, 5000);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞:`, error.message);
    }
}, {
    scheduled: true,
    timezone: "Asia/Tbilisi"
});


cron.schedule('*/5 * * * *', async () => {
    try {
        await fetch(SELF_URL);
        // await bot.telegram.sendMessage(CHAT_ID, '–ü–∏–Ω–≥ üü¢');
        console.log(`–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:', error);
    }
}, {
   scheduled: true,
   timezone: "Asia/Tbilisi"
});

// –ü–∏–Ω–≥—É–µ—Ç –±–æ—Ç–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
// setInterval(async () => {
//     try {
//         await bot.telegram.sendMessage(CHAT_ID, '–ü–∏–Ω–≥ üü¢');
//         console.log(`–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:', error);
//     }
// }, 600000);

// –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
