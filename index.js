require('dotenv').config();
const { Telegraf } = require('telegraf');
const fetch = require('node-fetch');
const cron = require('node-cron');
const express = require('express');
const axios = require('axios');
const mysql = require('mysql2/promise');

const BOT_TOKEN = process.env.BOT_TOKEN;
const CHAT_ID = process.env.CHAT_ID;
const FETCH_URL = process.env.FETCH_URL;
const SELF_URL = process.env.SELF_URL; // –ù–∞–ø—Ä–∏–º–µ—Ä, https://mybot.onrender.com

const dbConfig = {
    host: process.env.DB_HOST, 
    user: process.env.DB_USER, 
    password: process.env.DB_PASSWORD, 
    database: process.env.DB_NAME,
};

const bot = new Telegraf(BOT_TOKEN);
const app = express();

// Webhook –¥–ª—è Telegram
app.use(bot.webhookCallback('/bot')); 
bot.telegram.setWebhook(`${SELF_URL}/bot`);

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
app.get('/', (req, res) => {
    res.send('–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

async function queryDatabase(sql, params = []) {
    let connection;
    try {
        connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.execute(sql, params);
        return rows;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ MySQL:', error);
        return null;
    } finally {
        if (connection) await connection.end();
    }
}

bot.command('test', async (ctx) => {
    ctx.reply('–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!');
});

bot.command('id', async (ctx) => {
    console.log(`Chat ID: ${ctx.chat.id}`);
    ctx.reply(`–í–∞—à Chat ID: ${ctx.chat.id}`);
});

// –ó–∞–ø—Ä–æ—Å –∫ API –∫–∞–∂–¥—É—é –ø–µ—Ä–≤—É—é –º–∏–Ω—É—Ç—É –Ω–µ—á–µ—Ç–Ω–æ–≥–æ —á–∞—Å–∞
cron.schedule('1 1-23/2 * * *', async () => {
    try {
        const response = await axios.post(FETCH_URL, {}, {
            headers: {
                'Content-Type': 'application/json',
            }
        });
        console.log(response.data);
        await bot.telegram.sendMessage(CHAT_ID, `${FETCH_URL}: –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤`);

        const reports = await queryDatabase(
            'SELECT Report, DateTime FROM `interval_reports` ORDER BY ID DESC LIMIT 1'
        );
    
        if (!reports || reports.length === 0) {
            return ctx.reply('–ù–µ—Ç –æ—Ç—á–µ—Ç–∞.');
        }
    
        const { Report, DateTime } = reports[0]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    
        const message = `üìÖ ${DateTime}\n${Report}`; // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    
        ctx.reply(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    } catch (error) {
        console.error(`Error fetching report:`, error.message);
    }
});

// –ü–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(async () => {
    try {
        await fetch(SELF_URL);
        console.log(`–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${SELF_URL}`);
        await bot.telegram.sendMessage(CHAT_ID, `–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞:', error);
    }
}, 60000);

// –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
